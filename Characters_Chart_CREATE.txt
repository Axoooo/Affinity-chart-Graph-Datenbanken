Neo4j Xenoblade Chronicles 3 Graph Database by Tim & Robin

Anmeldung:
ssh ubuntu@54.87.28.242 -i "C:\Users\41754\OneDrive\Tim_Key.pem"
cypher-shell
username: neo4j
password: 1234

-----------------------------------------------------------------------------------------------------

// Allgemein wichtige Befehle

// Gebt alle Nodes und ihre Beziehungen aus
MATCH (n) OPTIONAL MATCH (n)-[r]->(m) RETURN n, r, m;

// Löscht alle Nodes und ihre Beziehungen (DELETE_ALL)
MATCH (n) OPTIONAL MATCH (n)-[r]-(m)
DELETE n, r, m;

-----------------------------------------------------------------------------------------------------

// Creation


CREATE
(:Nation {name: 'Keves'}),
(:Nation {name: 'Agnus'}),
(:Character {name: 'Queen Melia'}),
(:Character {name: 'Noah'}),
(:Character {name: 'Lanz'}),
(:Character {name: 'Eunie'}),
(:Character {name: 'Queen Nia'}),
(:Character {name: 'Mio'}),
(:Character {name: 'Sena'}),
(:Character {name: 'Taion'}),
(:Character {name: 'Mwamba'}),
(:Role {name: 'Attacker'}),
(:Role {name: 'Defender'}),
(:Role {name: 'Healer'});

MATCH (C:Character {name: 'Mio'})
SET C.Age = "9th Term";
-----------------------------------------------------------------------------------------------------------------

// Relationships: Character -> ... -> Character

MATCH
(noah:Character), (mio:Character)
WHERE
noah.name = 'Noah' AND mio.name = 'Mio'
CREATE
(noah)-[r: has_interlink_with]->(mio);

MATCH
(lanz:Character), (sena:Character)
WHERE
lanz.name = 'Lanz' AND sena.name = 'Sena'
CREATE
(lanz)-[r: has_interlink_with]->(sena);

MATCH
(eunie:Character), (taion:Character)
WHERE
eunie.name = 'Eunie' AND taion.name = 'Taion'
CREATE
(eunie)-[r: has_interlink_with]->(taion);

MATCH
(mio:Character), (noah:Character)
WHERE
mio.name = 'Mio' AND noah.name = 'Noah'
CREATE
(mio)-[r: has_interlink_with]->(noah);

MATCH
(sena:Character), (lanz:Character)
WHERE
sena.name = 'Sena' AND lanz.name = 'Lanz'
CREATE
(sena)-[r: has_interlink_with]->(lanz);

MATCH
(taion:Character), (eunie:Character)
WHERE
taion.name = 'Taion' AND eunie.name = 'Eunie'
CREATE
(taion)-[r: has_interlink_with]->(eunie);


MATCH
(queenM:Character), (queenN:Character)
WHERE
queenM.name = 'Queen Melia' AND queenN.name = 'Queen Nia'
CREATE
(queenM)-[r: is_friends_with]->(queenN);

MATCH
(queenN:Character), (queenM:Character)
WHERE
queenN.name = 'Queen Nia' AND queenM.name = 'Queen Melia'
CREATE
(queenN)-[r: is_friends_with]->(queenM);

-----------------------------------------------------------------------------------------------------------------

// Relationships: Character -> ... -> Nation

MATCH
(noah:Character), (keves:Nation)
WHERE
noah.name = 'Noah' AND keves.name = 'Keves'
CREATE
(noah)-[r: fights_for]->(keves);

MATCH
(lanz:Character), (keves:Nation)
WHERE
lanz.name = 'Lanz' AND keves.name = 'Keves'
CREATE
(lanz)-[r: fights_for]->(keves);

MATCH
(eunie:Character), (keves:Nation)
WHERE
eunie.name = 'Eunie' AND keves.name = 'Keves'
CREATE
(eunie)-[r: fights_for]->(keves);

MATCH
(mio:Character), (agnus:Nation)
WHERE
mio.name = 'Mio' AND agnus.name = 'Agnus'
CREATE
(mio)-[r: fights_for]->(agnus);

MATCH
(sena:Character), (agnus:Nation)
WHERE
sena.name = 'Sena' AND agnus.name = 'Agnus'
CREATE
(sena)-[r: fights_for]->(agnus);

MATCH
(taion:Character), (agnus:Nation)
WHERE
taion.name = 'Taion' AND agnus.name = 'Agnus'
CREATE
(taion)-[r: fights_for]->(agnus);

MATCH
(queenM:Character), (keves:Nation)
WHERE
queenM.name = 'Queen Melia' AND keves.name = 'Keves'
CREATE
(queenM)-[r:rules_over]->(keves);

MATCH
(queenN:Character), (agnus:Nation)
WHERE
queenN.name = 'Queen Nia' AND agnus.name = 'Agnus'
CREATE
(queenN)-[r: rules_over]->(agnus);



-----------------------------------------------------------------------------------------------------------------

// Relationships: Character -> ... -> Role

MATCH
(noah:Character), (attack:Role)
WHERE
noah.name = 'Noah' AND attack.name = 'Attacker'
CREATE
(noah)-[r: is]->(attack);

MATCH
(lanz:Character), (defend:Role)
WHERE
lanz.name = 'Lanz' AND defend.name = 'Defender'
CREATE
(lanz)-[r: is]->(defend);

MATCH
(eunie:Character), (heal:Role)
WHERE
eunie.name = 'Eunie' AND heal.name = 'Healer'
CREATE
(eunie)-[r: is]->(heal);

MATCH
(mio:Character), (defend:Role)
WHERE
mio.name = 'Mio' AND defend.name = 'Defender'
CREATE
(mio)-[r: is]->(defend);

MATCH
(sena:Character), (attack:Role)
WHERE
sena.name = 'Sena' AND attack.name = 'Attacker'
CREATE
(sena)-[r: is]->(attack);

MATCH
(taion:Character), (heal:Role)
WHERE
taion.name = 'Taion' AND heal.name = 'Healer'
CREATE
(taion)-[r: is]->(heal);

MATCH
(queenM:Character), (attack:Role)
WHERE
queenM.name = 'Queen Melia' AND attack.name = 'Attacker'
CREATE
(queenM)-[r: is]->(attack);

MATCH
(queenN:Character), (heal:Role)
WHERE
queenN.name = 'Queen Nia' AND heal.name = 'Healer'
CREATE
(queenN)-[r: is]->(heal);
-----------------------------------------------------------------------------------------------------------------


// SZENARIEN


// SZENARIO 1:
// Gib alle Characters aus die in Beziehung mit Mio steht, (interlink) haben.
MATCH (:Character {name: 'Mio'})-[:has_interlink_with]->(n:Character)
RETURN n.name;
// Erklärung:
// Sucht im Node mit Label "Character" dessen Namen 'Mio' ist und-
// sucht alle Beziehungen zu den Knoten "has_interlink_with" und gibt alle Character aus.


// SZENARIO 2:
// Sucht nach Characters von der Nation Agnus und die Role "heal" haben.
MATCH
(n:Character)-[:fights_for]->(:Nation {name: 'Agnus'}),
(n:Character)-[:is]->(:Role {name: 'Healer'})
RETURN n.name;
// Erklärung:
// Sucht einen Character aus dem Node "Character" der in Beziehung steht mit Node mit Label "Nation" und Wert 'Agnus'
// und Node mit Label "Role" und Wert Healer.


// SZENARIO 3:
// Suche nach Characters, die eine Nation regieren und hat auch die Attack Role haben
// und gebe NUR ihren Namen GROSS geschrieben aus.
MATCH
(n:Character)-[:is]->(:Role {name: 'Attacker'}),
(n:Character)-[:rules_over]->(m:Nation)
RETURN toUpper(substring(n.name, 6, 5)) AS Queens;
// Erklärung:
// Sucht nach einem Character aus dem Node "Character" der in Beziehung steht mit Knoten "is" zum Node "Role" mit Wert 'Attacker'
// und Knoten "rules_over" zum Node "Nation" und gebe den Namen GROSS geschrieben ohne die ersten 6 Buchstaben
// und nur den nächsten 5 Buchstaben in einer Liste "Queens" aus.


// SZENARIO 4:
// Suche nach Characters die Interlinked sind mit einem Character die, die Role Defend haben
MATCH
(n:Character)-[:has_interlink_with]->(m:Character),
(m:Character)-[:is]->(:Role {name: 'Defender'})
RETURN n.name;
// Erklärung:
// Sucht nach Characters im Node "Character" die einen Beziehung "has_interlink_with" zu einem anderen Character stehen
// welche mit dem Node "Role" und dem Wert "Defender" in Beziehung stehen.


// SZENARIO 5:
// Gib alle Characters mit ihren Rollen, Nationen und Beziehungen in einer Liste alphabetisch, aufsteigend aus.
MATCH
(c:Character)-[:is]->(r:Role),
(c:Character)-[]->(n:Nation),
(c:Character)-[]->(i:Character)
RETURN c.name AS Character, r.name AS Role, n.name AS Nation, i.name AS Relationship
ORDER BY Character ASC;
// Erklärung:
// Suche nach allen Node "Character" und den Node ("Role", "Nation", "Character") mit denen sie eine Beziehung haben
// und gib sie in einer Liste als Character, Role, Nation, Relationship alphabetisch und aufsteigend aus.


// SZENARIO 6 (Update):
// Aktualisieren das Alter von Mio
MATCH (c:Character {name: 'Mio'})
SET c.Age = "10th Term"
RETURN (c);
// Erklärung:
// Sucht im Node "Character" mit dem Namen 'Mio' und Setzt ihr Alter von '9th Term' zu '10th Term' und gibt es aus.


// SZENARIO 7 (DELETE):
// Löscht den Character namens "Mwamba"
MATCH (n:Character {name: 'Mwamba'})
DELETE n;
// Erklärung:
// Sucht im Node mit Label "Character" dessen Namen 'Mwamba' ist und löscht ihn aus der Datenbank

-----------------------------------------------------------------------------------------------------------------

// BACKUP & RESTORE
// Hat nicht geklappt, aber hier ist der Prozess aller Versuche dokumentiert:

// backup Code
neo4j-admin backup --backup-dir=/neo4j/backup --name=graphDB
// Das hier wäre ungefähr der Code, man kann noch mehr Parameter einfügen, aber eigentlich hätte das schon reichen sollen.

// PROBLEM 1
// Jetzt hatt ich irgendwie das Problem, dass es von etwas zu wenig hatte.
// Es kam als Fehlermeldung die ganze Zeit:
//
// WARNING: Max 1024 open files allowed, minimum of 40000 recommended. See the Neo4j manual.
// Unmatched arguments from index 0: 'database', 'backup', 'neo4j/backup', 'neo4j'
// Did you mean: set-initial-password or set-default-admin?
//
// Also habe ich recherchiert und folgendes gemacht...

// Unter dieser File LimitNOFILE=60000 einfügen (einfach eine sehr hohe zahl)
sudo systemctl edit neo4j.service
[Service]
LimitNOFILE=60000

// Unter dieser File DefaultLimitNOFILE=60000 auskommentieren und auch eine hohe Zahl einfügen
sudo nano /etc/systemd/system.conf
[Manager]
...
DefaultLimitNOFILE=60000

// Das gleiche auch unter dieser File
sudo nano /etc/systemd/user.conf
[Manager]
#...
DefaultLimitNOFILE=60000


// Unter dieser File 2 neue Einträge machen
sudo nano /etc/security/limits.conf
neo4j  soft  nofile  40000
neo4j  hard  nofile  40000

// Hat irgendwie immernoch nicht geklappt nochmals 2 Einträge gemacht
root  soft  nofile  40000
root  hard  nofile  40000


// Unter dieser File das hier einfügen
sudo nano /etc/pam.d/common-session
session required pam_limits.so

// Das gleiche auch für dieses File
sudo nano /etc/pam.d/common-session-noninteractive
session required pam_limits.so

// PROBLEM 2
// Danach bekam ich nur noch diese Fehlermeldung
//
// neo4j-admin database backup neo4j/backup --name=graphDB neo4j
// Unmatched arguments from index 0: 'database', 'backup', 'neo4j/backup', '--name=graphDB', 'neo4j'
// Did you mean: set-initial-password or set-default-admin?
//
// Und egal was, irgendwie konnte ich nicht herausfinden woran es lag. Ein mal habe ich etwas anderes bekommen
