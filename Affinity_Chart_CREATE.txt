
Neo4j Anmeldung

cypher-shell
username: neo4j
password: 1234

-----------------------------------------------------------------------------------------------------

// Creation [Nation, Character, Role]


CREATE
(:Nation {name: 'Keves'}),
(:Nation {name: 'Agnus'}),
(:Character {name: 'Queen Melia'}),
(:Character {name: 'Noah'}),
(:Character {name: 'Lanz'}),
(:Character {name: 'Eunie'}),
(:Character {name: 'Queen Nia'}),
(:Character {name: 'Mio'}),
(:Character {name: 'Sena'}),
(:Character {name: 'Taion'}),
(:Role {name: 'Attacker'}),
(:Role {name: 'Defender'}),
(:Role {name: 'Healer'});

-----------------------------------------------------------------------------------------------------

// Creation Relationships (Character - Character)


MATCH
(noah:Character), (mio:Character)
WHERE
noah.name = 'Noah' AND mio.name = 'Mio'
CREATE
(noah)-[r: has_interlink_with]->(mio);

MATCH
(lanz:Character), (sena:Character)
WHERE
lanz.name = 'Lanz' AND sena.name = 'Sena'
CREATE
(lanz)-[r: has_interlink_with]->(sena);

MATCH
(eunie:Character), (taion:Character)
WHERE
eunie.name = 'Eunie' AND taion.name = 'Taion'
CREATE
(eunie)-[r: has_interlink_with]->(taion);

MATCH
(mio:Character), (noah:Character)
WHERE
mio.name = 'Mio' AND noah.name = 'Noah'
CREATE
(mio)-[r: has_interlink_with]->(noah);

MATCH
(sena:Character), (lanz:Character)
WHERE
sena.name = 'Sena' AND lanz.name = 'Lanz'
CREATE
(sena)-[r: has_interlink_with]->(lanz);

MATCH
(taion:Character), (eunie:Character)
WHERE
taion.name = 'Taion' AND eunie.name = 'Eunie'
CREATE
(taion)-[r: has_interlink_with]->(eunie);

MATCH
(queenM:Character), (queenN:Character)
WHERE
queenM.name = 'Queen Melia' AND queenN.name = 'Queen Nia'
CREATE
(queenM)-[r: is_friends_with]->(queenN);

MATCH
(queenN:Character), (queenM:Character)
WHERE
queenN.name = 'Queen Nia' AND queenM.name = 'Queen Melia'
CREATE
(queenN)-[r: is_friends_with]->(queenM);

-----------------------------------------------------------------------------------------------------

// Relationships: Character (Queens) - Nation


MATCH
(queenM:Character), (keves:Nation)
WHERE
queenM.name = 'Queen Melia' AND keves.name = 'Keves'
CREATE
(queenM)-[r :rules_over]->(keves);

MATCH
(queenN:Character), (agnus:Nation)
WHERE
queenN.name = 'Queen Nia' AND agnus.name = 'Agnus'
CREATE
(queenN)-[r: rules_over]->(agnus);

-----------------------------------------------------------------------------------------------------

// Return All Nation

MATCH (keves:Nation),(agnus:Nation)
WHERE keves.name = 'Keves' AND agnus.name = 'Agnus'
RETURN keves.name, agnus.name;

// Delete Nation

MATCH (keves), (agnus)
DELETE keves, agnus;

-----------------------------------------------------------------------------------------------------

// Return All Characters

MATCH
(queenM:Character),(noah:Character), (lanz:Character), (eunie:Character),
(queenN:Character),(mio:Character), (sena:Character), (taion:Character)
WHERE
queenM.name = 'Queen Melia' AND noah.name = 'Noah' AND lanz.name = 'Lanz' AND eunie.name = 'Eunie' AND
queenN.name = 'Queen Nia' AND mio.name = 'Mio' AND sena.name = 'Sena' AND taion.name = 'Taion'
RETURN
queenM.name, noah.name, lanz.name, eunie.name,
queenN.name, mio.name, sena.name, taion.name;


// Delete All Characters

MATCH
(queenM), (noah), (lanz), (eunie),
(queenN), (mio), (sena), (taion)
DELETE queenM, noah, lanz, eunie, queenN, mio, sena, taion;

-----------------------------------------------------------------------------------------------------

// Return All Role

MATCH
(attack:Role), (defend:Role), (heal:Role)
WHERE
attack.name = 'Attacker' AND
defend.name = 'Defender' AND
heal.name = 'Healer'
RETURN
attack.name, defend.name, heal.name;

-----------------------------------------------------------------------------------------------------------------

// Szenarien




// Gebt alle Nodes aus
MATCH (n) RETURN (n);

// Gebt alle Nodes und ihre Beziehungen aus
MATCH (n) OPTIONAL MATCH (n)-[r]->(m) RETURN n, r, m;


// LÃ¶scht alle Nodes und ihre Beziehungen (DELETEALL)
MATCH (n) OPTIONAL MATCH (n)-[r]-(m)
DELETE n, r, m;



// Gib alle Characters aus die in Beziehungen mit Mio stehen
MATCH (:Character {name: 'Mio'})--(n:Character)
RETURN n.name;

// Gib alle Characters aus die in Beziehung mit Mio steht, (interlink) haben.
MATCH (:Character {name: 'Mio'})-[:has_interlink_with]->(n:Character)
RETURN n.name;
